import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
// hooks
import { useAuth } from '../hooks/useAuth';
import { withPublic } from '../hooks/useRoute';
// styles
import styles from '../styles/Authen.module.css';

const Register = () => {
  const { register } = useAuth();
  const [emailVal, setEmailVal] = useState(null);
  const [passwordVal, setPasswordVal] = useState(null);

  const [emailError, setEmailError] = useState(null);
  const [inputError, setInputError] = useState(null);
  const [passwordError, setPasswordError] = useState(null);
  const router = useRouter();

  const onChangeValue = (e, type) => {
    switch (type) {
      case 'email':
        setEmailVal(e.target.value);
        if (e.target.value === '') {
          setEmailError('กรุณากรอกข้อมูลในส่วนของ Email');
        }
        break;
      case 'password':
        setPasswordVal(e.target.value);
        if (e.target.value === '') {
          setPasswordError('กรุณากรอกข้อมูลในส่วนของ Password');
        }
        break;
    }
  };

  const onClickBackToLogin = () => {
    router.push('/');
  };

  const inputValidation = () => {
    const emailRegex =
      /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    const isEmail = emailRegex.test(emailVal);

    if (isEmail) {
      setInputError('');
      if (passwordVal.length > 6) {
        return true;
      } else {
        setInputError('ต้องการรหัสผ่านขั้นต่ำ 6 ตัวอักษร');
      }
    } else {
      setInputError('รูปแบบ Email ไม่ถูกต้อง');
    }
  };

  const requireValidation = () => {
    if (emailVal === null || emailVal === '') {
      setEmailError('กรุณากรอกข้อมูลในส่วนของ Email');
      return false;
    }
    if (passwordVal === null || passwordVal === '') {
      setPasswordError('กรุณากรอกข้อมูลในส่วนของ Password');
      return false;
    }

    return true;
  };

  const onSubmit = async () => {
    const isRequirePass = requireValidation();

    if (isRequirePass) {
      const isValidate = inputValidation();
      if (isValidate) {
        const postData = {
          username: emailVal,
          password: passwordVal,
        };
        const loginData = await register(postData);
        if (loginData.success) {
          localStorage.setItem('token', loginData.token);
          router.push('/profile');
        } else {
          setInputError(loginData.msg);
        }
      }
    }
  };

  return (
    <div className={styles.container}>
      <Head>
        <title>Front End</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>Register</h1>
        <div>
          <input
            className={styles.input}
            onChange={(e) => onChangeValue(e, 'email')}
            placeholder="Email"
          />
          {emailVal === '' && <p className={styles.error}>{emailError}</p>}
        </div>
        <div>
          <input
            className={styles.input}
            onChange={(e) => onChangeValue(e, 'password')}
            placeholder="Password"
            type="password"
          />
          {passwordVal === '' && (
            <p className={styles.error}>{passwordError}</p>
          )}
        </div>
        <button className={styles.button} onClick={onSubmit}>
          Submit
        </button>
        {inputError && <p className={styles.error}>{inputError}</p>}
        <p className={styles.register} onClick={onClickBackToLogin}>
          Back to login
        </p>
      </main>
    </div>
  );
};

export default withPublic(Register);
